// Mocks generated by Mockito 5.1.0 from annotations
// in catchfish/test/features/gameBoard/presentation/blocs/fishing/bloc/fishing_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:bloc/bloc.dart' as _i5;
import 'package:catchfish/core/errors/failures.dart' as _i7;
import 'package:catchfish/core/usecases/usecase.dart' as _i9;
import 'package:catchfish/features/gameBoard/domain/entities/fishing/pulse_entity.dart'
    as _i8;
import 'package:catchfish/features/gameBoard/domain/usecases/fishing/fishing_usecase.dart'
    as _i6;
import 'package:catchfish/features/gameBoard/presentation/blocs/fishing/bloc/fishing_bloc.dart'
    as _i2;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeFishingState_0 extends _i1.Fake implements _i2.FishingState {}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

/// A class which mocks [FishingBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockFishingBloc extends _i1.Mock implements _i2.FishingBloc {
  MockFishingBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FishingState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeFishingState_0()) as _i2.FishingState);
  @override
  _i4.Stream<_i2.FishingState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i2.FishingState>.empty())
          as _i4.Stream<_i2.FishingState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i2.FishingEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i2.FishingEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i2.FishingState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i2.FishingEvent>(
          _i5.EventHandler<E, _i2.FishingState>? handler,
          {_i5.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i5.Transition<_i2.FishingEvent, _i2.FishingState>? transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i4.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  void onChange(_i5.Change<_i2.FishingState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [FishingUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFishingUsecase extends _i1.Mock implements _i6.FishingUsecase {
  MockFishingUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i3.Either<_i7.Failure, _i8.PulseEntity>> call(
          _i9.NoParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
          returnValue: Future<_i3.Either<_i7.Failure, _i8.PulseEntity>>.value(
              _FakeEither_1<_i7.Failure, _i8.PulseEntity>())) as _i4
          .Future<_i3.Either<_i7.Failure, _i8.PulseEntity>>);
  @override
  _i4.Future<_i3.Either<_i7.Failure, _i8.PulseEntity>> getPulse() =>
      (super.noSuchMethod(Invocation.method(#getPulse, []),
          returnValue: Future<_i3.Either<_i7.Failure, _i8.PulseEntity>>.value(
              _FakeEither_1<_i7.Failure, _i8.PulseEntity>())) as _i4
          .Future<_i3.Either<_i7.Failure, _i8.PulseEntity>>);
}
